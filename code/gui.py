# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QGraphicsScene, QGraphicsPixmapItem
from PyQt5.QtGui import QPixmap, QImage
import unet
import vgg
import resnet_test
import load_model_resnet_1
import load_model_unet
import load_model_vgg
import cv2

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(636, 348)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setIndent(-1)
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        self.label_1 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.label_1.setFont(font)
        self.label_1.setAlignment(QtCore.Qt.AlignCenter)
        self.label_1.setObjectName("label_1")
        self.horizontalLayout_3.addWidget(self.label_1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.verticalLayout_3.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSpacing(10)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.graphicsView.setObjectName("graphicsView")
        self.horizontalLayout_2.addWidget(self.graphicsView)
        self.graphicsView_2 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_2.setEnabled(True)
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.horizontalLayout_2.addWidget(self.graphicsView_2)
        self.graphicsView_3 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_3.setObjectName("graphicsView_3")
        self.horizontalLayout_2.addWidget(self.graphicsView_3)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setObjectName("textEdit")
        self.horizontalLayout_4.addWidget(self.textEdit)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_1.setEnabled(True)
        self.pushButton_1.setObjectName("pushButton_1")
        self.verticalLayout.addWidget(self.pushButton_1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.horizontalLayout_4.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout_2.addWidget(self.pushButton_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout_2.addWidget(self.pushButton_5)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout_2.addWidget(self.pushButton_6)
        self.horizontalLayout_4.addLayout(self.verticalLayout_2)
        self.horizontalLayout_4.setStretch(0, 2)
        self.horizontalLayout_4.setStretch(1, 1)
        self.horizontalLayout_4.setStretch(2, 1)
        self.verticalLayout_3.addLayout(self.horizontalLayout_4)
        self.verticalLayout_3.setStretch(0, 2)
        self.verticalLayout_3.setStretch(1, 16)
        self.verticalLayout_3.setStretch(2, 3)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 636, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton_1.clicked.connect(MainWindow.train1) # type: ignore
        self.pushButton_2.clicked.connect(MainWindow.train2) # type: ignore
        self.pushButton_3.clicked.connect(MainWindow.train3) # type: ignore
        self.pushButton_4.clicked.connect(MainWindow.test1) # type: ignore
        self.pushButton_5.clicked.connect(MainWindow.test2) # type: ignore
        self.pushButton_6.clicked.connect(MainWindow.test3) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "测试图像"))
        self.label_1.setText(_translate("MainWindow", "Accuracy"))
        self.label_2.setText(_translate("MainWindow", "Loss"))
        self.pushButton_1.setText(_translate("MainWindow", "训练1"))
        self.pushButton_2.setText(_translate("MainWindow", "训练2"))
        self.pushButton_3.setText(_translate("MainWindow", "训练3"))
        self.pushButton_4.setText(_translate("MainWindow", "测试1"))
        self.pushButton_5.setText(_translate("MainWindow", "测试2"))
        self.pushButton_6.setText(_translate("MainWindow", "测试3"))
    def train1(self):
        unet.unet()
        img_3 = cv2.imread('unet_loss.png')  # 读取图像
        img_3 = cv2.cvtColor(img_3, cv2.COLOR_BGR2RGB)  # 转换图像通道
        x_3 = img_3.shape[1]  # 获取图像大小
        y_3 = img_3.shape[0]
        self.zoomscale = 1  # 图片放缩尺度
        frame_3 = QImage(img_3, x_3, y_3, QImage.Format_RGB888)
        pix_3 = QPixmap.fromImage(frame_3)
        self.item_3 = QGraphicsPixmapItem(pix_3)  # 创建像素图元
        self.scene = QGraphicsScene()  # 创建场景
        self.graphicsView.setScene(self.scene)
        self.scene.clear()
        self.scene_3 = QGraphicsScene()  # 创建场景
        self.graphicsView_3.setScene(self.scene_3)
        self.scene_3.clear()
        self.scene_3.addItem(self.item_3)
        #self.graphicsView_3.show()
        img_2 = cv2.imread('unet_accuracy.png')  # 读取图像
        img_2 = cv2.cvtColor(img_2, cv2.COLOR_BGR2RGB)  # 转换图像通道
        x_2 = img_2.shape[1]  # 获取图像大小
        y_2 = img_2.shape[0]
        self.zoomscale = 1  # 图片放缩尺度
        frame_2 = QImage(img_2, x_2, y_2, QImage.Format_RGB888)
        pix_2 = QPixmap.fromImage(frame_2)
        self.item_2 = QGraphicsPixmapItem(pix_2)  # 创建像素图元
        self.scene_2 = QGraphicsScene()  # 创建场景
        self.graphicsView_2.setScene(self.scene_2)
        self.scene_2.clear()
        self.scene_2.addItem(self.item_2)
        #print(self.scene_2)
        #self.graphicsView_2.show()
    def train2(self):
        resnet_test.resnet_1()
        img_3 = cv2.imread('resnet_loss.png')  # 读取图像
        img_3 = cv2.cvtColor(img_3, cv2.COLOR_BGR2RGB)  # 转换图像通道
        x_3 = img_3.shape[1]  # 获取图像大小
        y_3 = img_3.shape[0]
        self.zoomscale = 1  # 图片放缩尺度
        frame_3 = QImage(img_3, x_3, y_3, QImage.Format_RGB888)
        pix_3 = QPixmap.fromImage(frame_3)
        self.item_3 = QGraphicsPixmapItem(pix_3)  # 创建像素图元
        self.scene = QGraphicsScene()  # 创建场景
        self.graphicsView.setScene(self.scene)
        self.scene.clear()
        self.scene_3 = QGraphicsScene()  # 创建场景
        self.graphicsView_3.setScene(self.scene_3)
        self.scene_3.clear()
        self.scene_3.addItem(self.item_3)
        self.graphicsView_3.show()
        img_2 = cv2.imread('resnet_accuracy.png')  # 读取图像
        img_2 = cv2.cvtColor(img_2, cv2.COLOR_BGR2RGB)  # 转换图像通道
        x_2 = img_2.shape[1]  # 获取图像大小
        y_2 = img_2.shape[0]
        self.zoomscale = 1  # 图片放缩尺度
        frame_2 = QImage(img_2, x_2, y_2, QImage.Format_RGB888)
        pix_2 = QPixmap.fromImage(frame_2)
        self.item_2 = QGraphicsPixmapItem(pix_2)  # 创建像素图元
        self.scene_2 = QGraphicsScene()  # 创建场景
        self.graphicsView_2.setScene(self.scene_2)
        self.scene_2.clear()
        self.scene_2.addItem(self.item_2)
        self.graphicsView_2.show()
    def train3(self):
        vgg.vgg16()
        img_3 = cv2.imread('vgg_loss.png')  # 读取图像
        img_3 = cv2.cvtColor(img_3, cv2.COLOR_BGR2RGB)  # 转换图像通道
        x_3 = img_3.shape[1]  # 获取图像大小
        y_3 = img_3.shape[0]
        self.zoomscale = 1  # 图片放缩尺度
        frame_3 = QImage(img_3, x_3, y_3, QImage.Format_RGB888)
        pix_3 = QPixmap.fromImage(frame_3)
        self.item_3 = QGraphicsPixmapItem(pix_3)  # 创建像素图元
        self.scene = QGraphicsScene()  # 创建场景
        self.graphicsView.setScene(self.scene)
        self.scene.clear()
        self.scene_3 = QGraphicsScene()  # 创建场景
        self.graphicsView_3.setScene(self.scene_3)
        self.scene_3.clear()
        self.scene_3.addItem(self.item_3)
        self.graphicsView_3.show()
        img_2 = cv2.imread('vgg_accuracy.png')  # 读取图像
        img_2 = cv2.cvtColor(img_2, cv2.COLOR_BGR2RGB)  # 转换图像通道
        x_2 = img_2.shape[1]  # 获取图像大小
        y_2 = img_2.shape[0]
        self.zoomscale = 1  # 图片放缩尺度
        frame_2 = QImage(img_2, x_2, y_2, QImage.Format_RGB888)
        pix_2 = QPixmap.fromImage(frame_2)
        self.item_2 = QGraphicsPixmapItem(pix_2)  # 创建像素图元
        self.scene_2 = QGraphicsScene()  # 创建场景
        self.graphicsView_2.setScene(self.scene_2)
        self.scene_2.clear()
        self.scene_2.addItem(self.item_2)
        self.graphicsView_2.show()
    def test1(self):
        self.scene = QGraphicsScene()  # 创建场景
        self.graphicsView.setScene(self.scene)
        self.scene.clear()
        self.scene_2 = QGraphicsScene()  # 创建场景
        self.graphicsView_2.setScene(self.scene_2)
        self.scene_2.clear()
        self.scene_3 = QGraphicsScene()  # 创建场景
        self.graphicsView_3.setScene(self.scene_3)
        self.scene_3.clear()
        load_model_unet.load_model_unet()
        img = cv2.imread('unet_test.png')  # 读取图像
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # 转换图像通道
        x = img.shape[1]  # 获取图像大小
        y = img.shape[0]
        self.zoomscale = 1  # 图片放缩尺度
        frame = QImage(img, x, y, QImage.Format_RGB888)
        pix = QPixmap.fromImage(frame)
        self.item = QGraphicsPixmapItem(pix)  # 创建像素图元
        self.scene.addItem(self.item)
        self.graphicsView.show()
        with open('unet_result.txt') as f:
            my_file = f.read()
        self.textEdit.setText(my_file)
    def test2(self):
        self.scene = QGraphicsScene()  # 创建场景
        self.graphicsView.setScene(self.scene)
        self.scene.clear()
        self.scene_2 = QGraphicsScene()  # 创建场景
        self.graphicsView_2.setScene(self.scene_2)
        self.scene_2.clear()
        self.scene_3 = QGraphicsScene()  # 创建场景
        self.graphicsView_3.setScene(self.scene_3)
        self.scene_3.clear()
        load_model_resnet_1.load_model_resnet()
        img = cv2.imread('resnet_test.png')  # 读取图像
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # 转换图像通道
        x = img.shape[1]  # 获取图像大小
        y = img.shape[0]
        self.zoomscale = 1  # 图片放缩尺度
        frame = QImage(img, x, y, QImage.Format_RGB888)
        pix = QPixmap.fromImage(frame)
        self.item = QGraphicsPixmapItem(pix)  # 创建像素图元
        self.scene.addItem(self.item)
        self.graphicsView.show()
        with open('resnet_result.txt') as f:
            my_file = f.read()
        self.textEdit.setText(my_file)
    def test3(self):
        self.scene = QGraphicsScene()  # 创建场景
        self.graphicsView.setScene(self.scene)
        self.scene.clear()
        self.scene_2 = QGraphicsScene()  # 创建场景
        self.graphicsView_2.setScene(self.scene_2)
        self.scene_2.clear()
        self.scene_3 = QGraphicsScene()  # 创建场景
        self.graphicsView_3.setScene(self.scene_3)
        self.scene_3.clear()
        load_model_vgg.load_model_vgg()
        img = cv2.imread('vgg_test.png')  # 读取图像
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # 转换图像通道
        x = img.shape[1]  # 获取图像大小
        y = img.shape[0]
        self.zoomscale = 1  # 图片放缩尺度
        frame = QImage(img, x, y, QImage.Format_RGB888)
        pix = QPixmap.fromImage(frame)
        self.item = QGraphicsPixmapItem(pix)  # 创建像素图元
        self.scene.addItem(self.item)
        self.graphicsView.show()
        with open('vgg_result.txt') as f:
            my_file = f.read()
        self.textEdit.setText(my_file)